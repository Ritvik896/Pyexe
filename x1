import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import os
import json
import pandas as pd
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class CheckExtractor:
    def __init__(self, input_file):
        self.input_file = input_file
        
        # Get the user's Downloads folder
        self.output_dir = os.path.join(os.path.expanduser("~"), "Downloads")
        
        self.output_csv_file = os.path.join(self.output_dir, 'checkov-violations-summary.csv')
        self.output_excel_file = os.path.join(self.output_dir, 'checkov-violations-summary.xlsx')
        self.extracted_data = []

    def read_file(self):
        if not os.path.isfile(self.input_file):
            logging.error(f"File not found: {self.input_file}")
            raise FileNotFoundError(f"File not Found: {self.input_file}")

        with open(self.input_file, 'r') as f:
            content = f.read()
            return content

    def parse_json(self, content):
        try:
            return json.loads(content)
        except json.JSONDecodeError as e:
            logging.error(f"Error parsing JSON: {e}")
            raise

    def extract_checks(self, data):
        for check in data:
            check_type = check.get('check_type', 'Unknown')
            failed_checks = check['results'].get('failed_checks', [])
            if failed_checks:
                self._extract_failed_checks(check_type, failed_checks)
            else:
                self._add_passed_check(check_type)

    def _extract_failed_checks(self, check_type, failed_checks):
        for failed_check in failed_checks:
            if failed_check['check_result']['result'] == 'FAILED':
                details = {
                    'check_type': check_type,
                    'check_id': failed_check.get('check_id', 'N/A'),
                    'check_class': failed_check.get('check_class', 'N/A'),
                    'guideline': failed_check.get('guideline', 'N/A'),
                    'resource': failed_check.get('resource', 'N/A'),
                    'file_path': failed_check.get('file_path', 'N/A'),
                    'file_abs_path': failed_check.get('file_abs_path', 'N/A'),
                    'repo_file_path': failed_check.get('repo_file_path', 'N/A'),
                    'file_line_range': failed_check.get('file_line_range', 'N/A'),
                    'status': 'FAILED'
                }
                self.extracted_data.append(details)

    def _add_passed_check(self, check_type):
        self.extracted_data.append({
            'check_type': check_type,
            'check_id': 'N/A',
            'check_class': 'N/A',
            'guideline': 'N/A',
            'resource': 'N/A',
            'file_path': 'N/A',
            'file_abs_path': 'N/A',
            'repo_file_path': 'N/A',
            'file_line_range': 'N/A',
            'status': 'PASSED - No failed checks'
        })

    def write_to_csv(self):
        df = pd.DataFrame(self.extracted_data)
        df['file_line_range'] = df['file_line_range'].apply(lambda x: str(x) if isinstance(x, list) else x)
        df.to_csv(self.output_csv_file, index=False)
        logging.info(f"Data successfully written to {self.output_csv_file}.")

    def write_to_excel(self):
        df = pd.DataFrame(self.extracted_data)
        df['file_line_range'] = df['file_line_range'].apply(lambda x: str(x) if isinstance(x, list) else x)
        df.to_excel(self.output_excel_file, index=False, sheet_name="Checks Summary")
        logging.info(f"Data successfully written to {self.output_excel_file}.")

    def run(self):
        try:
            logging.info(f"Reading file: {self.input_file}")
            content = self.read_file()
            logging.info("Parsing JSON content..")
            data = self.parse_json(content)
            logging.info("Extracting checks..")
            self.extract_checks(data)
            logging.info("Writing extracted data to CSV..")
            self.write_to_csv()
            logging.info("Writing extracted data to Excel..")
            self.write_to_excel()
            logging.info(f"Process completed successfully. Extracted {len(self.extracted_data)} checks.")
            return True
        except Exception as e:
            logging.error(f"An error occurred: {e}")
            return False


class LogProcessorApp:
    def __init__(self, master):
        self.master = master
        master.title("Log Processor")

        self.file_path = ""
        self.check_extractor = None

        self.file_type_label = tk.Label(master, text="Select File Extension:")
        self.file_type_label.pack()

        self.file_type_var = tk.StringVar(value="All Files")
        self.file_type_dropdown = ttk.Combobox(master, textvariable=self.file_type_var,
                                                values=["All Files", "Text Files",
                                                        "JSON Files", "Rego Files"],
                                                state='readonly')
        self.file_type_dropdown.pack()

        self.browse_button = tk.Button(master, text="Upload File", command=self.browse_files)
        self.browse_button.pack()

        self.file_label = tk.Label(master, text="")
        self.file_label.pack()

        self.scanner_type_label = tk.Label(master, text="Select Scanner Type:")
        self.scanner_type_label.pack()

        self.scanner_type_var = tk.StringVar(value="CheckOV log")
        self.scanner_type_dropdown = ttk.Combobox(master, textvariable=self.scanner_type_var,
                                                   values=["CheckOV log", "OPA log"],
                                                   state='readonly')
        self.scanner_type_dropdown.pack()

        self.submit_button = tk.Button(master, text="Submit", command=self.submit)
        self.submit_button.pack()

        self.download_button = tk.Button(master, text="Download Results", command=self.download_results)
        self.download_button.pack()

    def browse_files(self):
        file_types = {
            "All Files": "*.*",
            "Text Files": "*.txt",
            "JSON Files": "*.json",
            "Rego Files": "*.rego"
        }

        selected_file_type = self.file_type_var.get()
        file_type = file_types.get(selected_file_type, "*.*")
        
        self.file_path = filedialog.askopenfilename(filetypes=[(selected_file_type, file_type)])
        if self.file_path:
            self.file_label.config(text=self.file_path)

    def submit(self):
        if self.file_path:
            log_type = self.scanner_type_var.get()
            if log_type == "CheckOV log":
                self.check_extractor = CheckExtractor(self.file_path)
                if self.check_extractor.run():
                    messagebox.showinfo("Success", "CheckOV log processing completed successfully.")
            elif log_type == "OPA log":
                messagebox.showinfo("Info", "OPA log processing is not yet implemented.")
        else:
            messagebox.showwarning("Warning", "Please upload a file first.")

    def download_results(self):
        if self.check_extractor:
            output_csv = self.check_extractor.output_csv_file
            output_excel = self.check_extractor.output_excel_file

            if os.path.exists(output_csv) and os.path.exists(output_excel):
                # This will open the files in the default application
                os.startfile(output_csv)
                os.startfile(output_excel)

                # Show a message indicating where the files are located
                messagebox.showinfo("Download", f"Files downloaded to:\n{self.check_extractor.output_dir}\n\nOpen them to view.")
            else:
                messagebox.showwarning("Warning", "Results not found. Please process the logs first.")
        else:
            messagebox.showwarning("Warning", "No processing has been done yet.")

if __name__ == '__main__':
    root = tk.Tk()
    app = LogProcessorApp(root)
    root.mainloop()
