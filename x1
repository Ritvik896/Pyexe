import tkinter as tk
from tkinter import filedialog, ttk
import os
import logging
import pandas as pd
import json

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class CheckExtractor:
    def __init__(self, input_file, output_csv_file, output_excel_file):
        self.input_file = input_file
        self.output_csv_file = output_csv_file
        self.output_excel_file = output_excel_file
        self.extracted_data = []

    def read_file(self):
        if not os.path.isfile(self.input_file):
            logging.error(f"File not found: {self.input_file}")
            raise FileNotFoundError(f"File not Found: {self.input_file}")

        with open(self.input_file, 'r') as f:
            try:
                content = f.read()
                return content
            except Exception as e:
                logging.error(f"Error reading the file: {e}")
                raise

    def parse_json(self, content):
        try:
            return json.loads(content)
        except json.JSONDecodeError as e:
            logging.error(f"Error parsing JSON: {e}")
            raise

    def extract_checks(self, data):
        for check in data:
            check_type = check.get('check_type', 'Unknown')
            failed_checks = check['results'].get('failed_checks', [])

            if failed_checks:
                self._extract_failed_checks(check_type, failed_checks)
            else:
                self._add_passed_check(check_type)

    def _extract_failed_checks(self, check_type, failed_checks):
        for failed_check in failed_checks:
            if failed_check['check_result']['result'] == 'FAILED':
                details = {
                    'check_type': check_type,
                    'check_id': failed_check.get('check_id', 'N/A'),
                    'check_class': failed_check.get('check_class', 'N/A'),
                    'guideline': failed_check.get('guideline', 'N/A'),
                    'resource': failed_check.get('resource', 'N/A'),
                    'file_path': failed_check.get('file_path', 'N/A'),
                    'file_abs_path': failed_check.get('file_abs_path', 'N/A'),
                    'repo_file_path': failed_check.get('repo_file_path', 'N/A'),
                    'file_line_range': failed_check.get('file_line_range', 'N/A'),
                    'status': 'FAILED'
                }
                self.extracted_data.append(details)

    def _add_passed_check(self, check_type):
        self.extracted_data.append({
            'check_type': check_type,
            'check_id': 'N/A',
            'check_class': 'N/A',
            'guideline': 'N/A',
            'resource': 'N/A',
            'file_path': 'N/A',
            'file_abs_path': 'N/A',
            'repo_file_path': 'N/A',
            'file_line_range': 'N/A',
            'status': 'PASSED - No failed checks'
        })

    def write_to_csv(self):
        try:
            df = pd.DataFrame(self.extracted_data)
            df['file_line_range'] = df['file_line_range'].apply(lambda x: str(x) if isinstance(x, list) else x)
            df.to_csv(self.output_csv_file, index=False)
            logging.info(f"Data successfully written to {self.output_csv_file}.")
        except Exception as e:
            logging.error(f"Error writing to CSV: {e}")
            raise

    def write_to_excel(self):
        try:
            df = pd.DataFrame(self.extracted_data)
            df['file_line_range'] = df['file_line_range'].apply(lambda x: str(x) if isinstance(x, list) else x)
            df.to_excel(self.output_excel_file, index=False, sheet_name="Checks Summary")
            logging.info(f"Data successfully written to {self.output_excel_file}.")
        except Exception as e:
            logging.error(f"Error writing to Excel: {e}")
            raise

    def run(self):
        try:
            logging.info(f"Reading file: {self.input_file}")
            content = self.read_file()

            logging.info("Parsing JSON content..")
            data = self.parse_json(content)

            logging.info("Extracting checks..")
            self.extract_checks(data)

            logging.info("Writing extracted data to CSV..")
            self.write_to_csv()

            logging.info("Writing extracted data to Excel..")
            self.write_to_excel()

            logging.info(f"Process completed successfully. Extracted {len(self.extracted_data)} checks.")
        except Exception as e:
            logging.error(f"An error occurred: {e}")

def browse_files():
    file_types = file_type_var.get()

    if file_types == "All Files":
        file_types = [("All Files", "*.*")]
    elif file_types == "Text Files":
        file_types = [("Text Files", "*.txt")]
    elif file_types == "JSON Files":
        file_types = [("JSON Files", "*.json")]
    elif file_types == "Rego Files":
        file_types = [("Rego Files", "*.rego")]
    else:
        file_types = [("All Files", "*.*")]

    filename = filedialog.askopenfilename(title="Select a File", filetypes=file_types)

    if filename:
        file_path_var.set(filename)
    else:
        file_path_var.set("No file selected")

def execute_checkov():
    input_file = file_path_var.get()
    output_csv_file = 'checkov-violations-summary.csv'
    output_excel_file = 'checkov-violations-summary.xlsx'
    extractor = CheckExtractor(input_file, output_csv_file, output_excel_file)
    extractor.run()

def execute_opa():
    input_file = file_path_var.get()
    output_csv_file = 'opa-violations-summary.csv'
    output_excel_file = 'opa-violations-summary.xlsx'
    extractor = CheckExtractor(input_file, output_csv_file, output_excel_file)
    extractor.run()

def submit_action():
    scanner_field = scanner_field_var.get()
    if scanner_field == "CheckOV log":
        execute_checkov()
    elif scanner_field == "OPA log":
        execute_opa()

def download_results():
    output_csv_file = filedialog.asksaveasfilename(defaultextension=".csv", initialfile="violations-summary.csv")
    output_excel_file = filedialog.asksaveasfilename(defaultextension=".xlsx", initialfile="violations-summary.xlsx")

    if output_csv_file:
        os.rename('checkov-violations-summary.csv', output_csv_file)
    if output_excel_file:
        os.rename('checkov-violations-summary.xlsx', output_excel_file)

def open_application():
    root = tk.Tk()
    root.title("OPA Application")
    root.geometry("500x300")

    welcome_label = tk.Label(root, text="Welcome to OPA Application", font=("Arial", 14))
    welcome_label.grid(row=0, column=0, columnspan=2, pady=10)

    global file_type_var
    file_type_var = tk.StringVar(value="All Files")
    file_types = ["All Files", "Text Files", "JSON Files", "Rego Files"]
    file_type_label = tk.Label(root, text="File Extension:", font=("Arial", 10))
    file_type_label.grid(row=1, column=0, padx=10, pady=5, sticky="e")
    file_type_dropdown = ttk.Combobox(root, textvariable=file_type_var, values=file_types, state="readonly")
    file_type_dropdown.grid(row=1, column=1, padx=10, pady=5, sticky="w")

    global file_path_var
    file_path_var = tk.StringVar(value="No file selected")
    upload_button = tk.Button(root, text="Upload File", command=browse_files, font=("Arial", 10), relief="raised", bd=2)
    upload_button.grid(row=2, column=0, padx=10, pady=5, sticky="e")
    file_path_entry = tk.Entry(root, textvariable=file_path_var, font=("Arial", 10), width=40)
    file_path_entry.grid(row=2, column=1, padx=10, pady=5, sticky="w")

    global scanner_field_var
    scanner_field_var = tk.StringVar(value="CheckOV log")
    scanner_fields = ["CheckOV log", "OPA log"]
    scanner_field_label = tk.Label(root, text="Scanner Field:", font=("Arial", 10))
    scanner_field_label.grid(row=3, column=0, padx=10, pady=5, sticky="e")
    scanner_field_dropdown = ttk.Combobox(root, textvariable=scanner_field_var, values=scanner_fields, state="readonly")
    scanner_field_dropdown.grid(row=3, column=1, padx=10, pady=5, sticky="w")

    submit_button = tk.Button(root, text="Submit", command=submit_action, font=("Arial", 10), relief="raised", bd=2)
    submit_button.grid(row=4, column=0, padx=10, pady=5, sticky="e")

    download_button = tk.Button(root, text="Download Results", command=download_results, font=("Arial", 10), relief="raised", bd=2)
    download_button.grid(row=4, column=1, padx=10, pady=5, sticky="w")

    root.mainloop()

if __name__ == "__main__":
    open_application()
